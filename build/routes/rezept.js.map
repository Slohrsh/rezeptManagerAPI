{"version":3,"sources":["../../src/routes/rezept.js"],"names":["router","get","req","res","context","models","Rezept","findAll","include","all","nested","rezepte","rezepteViews","forEach","rezept","push","RezeptViewLight","id","bild","titel","kcal","send","findByTitel","params","findByPk","destroy","rezeptId","zutaten","mengen","menge","Zutat","REZ02ZUTATId","zutat","zutatView","beschreibung","einheit","RezeptView","post","body","patch","loadedRezept","findAllByBeschreibung","map","newZutat","zutatSearch","create","RezeptZutat","REZ01REZEPTId","save","newRezept"],"mappings":"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","sourcesContent":["import { Router } from 'express';\nimport { RezeptViewLight, RezeptView, Zutat } from '../models/dto/rezeptView'\n\nconst router = Router();\n\nrouter.get('/', async (req, res) => {\n  const rezepte = await req.context.models.Rezept.findAll({ include: { all: true, nested: true } });\n  const rezepteViews = [];\n\n  rezepte.forEach(\n    (rezept) => {\n      rezepteViews.push(new RezeptViewLight(rezept.id, rezept.bild, rezept.titel, rezept.kcal));\n    }\n  )\n  return res.send(rezepteViews);\n});\n\nrouter.get('/search/:titel', async (req, res) => {\n  const rezepte = await req.context.models.Rezept.findByTitel(req.params.titel);\n  const rezepteViews = [];\n\n  rezepte.forEach(\n    (rezept) => {\n      rezepteViews.push(new RezeptViewLight(rezept.id, rezept.bild, rezept.titel, rezept.kcal));\n    }\n  )\n  return res.send(rezepteViews);\n});\n\nrouter.delete('/:id', async (req, res) => {\n  const rezept = await req.context.models.Rezept.findByPk(req.params.id);\n  rezept.destroy()\n  return res.send('ok');\n});\n\nrouter.get('/debug', async (req, res) => {\n  const rezepte = await req.context.models.Rezept.findAll({ include: { all: true, nested: true } });\n\n  return res.send(rezepte);\n});\n\nrouter.get('/:rezeptId', async (req, res) => {\n  const rezept = await req.context.models.Rezept.findByPk(\n    req.params.rezeptId,\n    { include: { all: true, nested: true } }\n  );\n\n\n  if (rezept) {\n    const zutaten = [];\n    if (rezept.mengen) {\n      for (let menge of rezept.mengen) {\n        const zutat = await req.context.models.Zutat.findByPk(menge.REZ02ZUTATId);\n        const zutatView = new Zutat(menge.menge, zutat.beschreibung, menge.einheit);\n        zutaten.push(zutatView);\n      }\n    }\n    return res.send(new RezeptView(rezept.id, rezept.bild, rezept.titel, rezept.kcal, rezept.rezept, zutaten));\n  }\n\n  return res.send(rezept);\n});\n\nrouter.post('/debug', async (req, res) => {\n  const rezept = await req.body;\n  return res.send(rezept);\n});\n\nrouter.patch('/', async (req, res) => {\n  const rezept = await req.body;\n\n  let loadedRezept = await req.context.models.Rezept.findByPk(rezept.id, { include: 'mengen' });\n\n  loadedRezept.titel = rezept.titel;\n  loadedRezept.rezept = rezept.rezept;\n  loadedRezept.kcal = rezept.kcal;\n  loadedRezept.bild = rezept.bild;\n\n  loadedRezept.mengen.forEach((menge) => {\n    menge.destroy();\n  })\n\n  const zutaten = await req.context.models.Zutat.findAllByBeschreibung(rezept.zutaten.map(zutat => zutat.beschreibung));\n\n  if (rezept.zutaten) {\n    for (const zutat of rezept.zutaten) {\n      let newZutat;\n      if (zutaten) {\n        zutaten.forEach((zutatSearch) => {\n          if (zutatSearch.beschreibung === zutat.beschreibung) {\n            newZutat = zutatSearch;\n          }\n        });\n      }\n      if (newZutat) { }\n      else if (zutat.id) {\n        newZutat = zutat;\n      } else {\n        newZutat = await req.context.models.Zutat.create(\n          {\n            beschreibung: zutat.beschreibung\n          }\n        );\n      }\n      await req.context.models.RezeptZutat.create(\n        {\n          menge: zutat.menge,\n          einheit: zutat.einheit,\n          REZ01REZEPTId: loadedRezept.id,\n          REZ02ZUTATId: newZutat.id\n        }\n      );\n    }\n  }\n\n  loadedRezept.save();\n\n  return res.send(loadedRezept);\n});\n\nrouter.post('/', async (req, res) => {\n  const rezept = await req.body;\n\n  const newRezept = await req.context.models.Rezept.create(\n    {\n      bild: rezept.bild,\n      titel: rezept.titel,\n      rezept: rezept.rezept,\n      kcal: rezept.kcal\n    }\n  );\n\n  const zutaten = await req.context.models.Zutat.findAllByBeschreibung(rezept.zutaten.map(zutat => zutat.beschreibung));\n\n  if (rezept.zutaten) {\n    for (const zutat of rezept.zutaten) {\n      let newZutat;\n      if (zutaten) {\n        zutaten.forEach((zutatSearch) => {\n          if (zutatSearch.beschreibung === zutat.beschreibung) {\n            newZutat = zutatSearch;\n          }\n        });\n      }\n      if (newZutat) { }\n      else if (zutat.id) {\n        newZutat = zutat;\n      } else {\n        newZutat = await req.context.models.Zutat.create(\n          {\n            beschreibung: zutat.beschreibung\n          }\n        );\n      }\n      await req.context.models.RezeptZutat.create(\n        {\n          menge: zutat.menge,\n          einheit: zutat.einheit,\n          REZ01REZEPTId: newRezept.id,\n          REZ02ZUTATId: newZutat.id\n        }\n      );\n    }\n  }\n\n  return res.send(rezept);\n});\n\nexport default router;\n"],"file":"rezept.js"}