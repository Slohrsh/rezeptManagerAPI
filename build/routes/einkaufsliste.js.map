{"version":3,"sources":["../../src/routes/einkaufsliste.js"],"names":["require","QueryTypes","router","post","req","res","body","rezeptId","context","models","Rezept","findByPk","include","rezept","mengen","forEach","menge","Einkaufsliste","create","REZ70REZEPTZUTATENId","id","send","params","eintrag","destroy","check","checked","save","get","sequelize","query","type","SELECT","einkaufsliste","eintraege","item","rezeptIds","split","Menge","einheit","undefined","foundItem","beschreibung","push"],"mappings":"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","sourcesContent":["import { Router } from 'express';\nimport { sequelize } from '../models';\nimport { EinkaufslisteEintragView, Menge } from '../models/dto/einkaufslisteEintragView';\n\nconst { QueryTypes } = require('sequelize');\n\nconst router = Router();\n\nrouter.post('/', async (req, res) => {\n    const rezeptId = await req.body;\n\n    const rezept = await req.context.models.Rezept.findByPk(rezeptId.rezeptId, { include: 'mengen' });\n\n    rezept.mengen.forEach((menge) => {\n        req.context.models.Einkaufsliste.create(\n            {\n                REZ70REZEPTZUTATENId: menge.id\n            }\n        );\n    })\n\n    return res.send('ok');\n});\n\nrouter.delete('/:id', async (req, res) => {\n    const id = req.params.id;\n\n    const eintrag = await req.context.models.Einkaufsliste.findByPk(id);\n\n    eintrag.destroy();\n\n    return res.send('ok');\n});\n\n\nrouter.post('/check', async (req, res) => {\n    const check = await req.body;\n\n    const eintrag = await req.context.models.Einkaufsliste.findByPk(check.id);\n\n    eintrag.checked = check.checked;\n\n    eintrag.save();\n\n    return res.send('ok');\n});\n\nrouter.get('/', async (req, res) => {\n    const einkaufsliste = await sequelize.query(\n        \"select sum(rez70.menge) menge, rez70.einheit, rez02.beschreibung, group_concat(rez70.REZ01REZEPTId separator ', ') as rezeptIds from EIN1_EINKAUFSLISTEs ein1 \"\n        + \"join REZ70_REZEPT_ZUTATENs rez70 on rez70.id = ein1.REZ70REZEPTZUTATENId \"\n        + \"join REZ02_ZUTATs rez02 on rez02.id = rez70.REZ02ZUTATId \"\n        + \"group by rez70.einheit, rez02.beschreibung \"\n        + \"order by rez02.beschreibung\", { type: QueryTypes.SELECT });\n\n    const eintraege = [];\n\n    einkaufsliste.forEach((item) => {\n        item.rezeptIds = item.rezeptIds.split(',');\n        item.mengen = [new Menge(item.einheit, item.menge)]\n        item.einheit = undefined;\n        item.menge = undefined;\n        let foundItem;\n        eintraege.forEach((eintrag) => {\n            if(eintrag.beschreibung === item.beschreibung){\n                foundItem = true;\n                item.mengen.push(new Menge(item.einheit, item.menge))\n            }\n        });\n\n        if(!foundItem){\n            eintraege.push(item);\n        }\n    });\n\n\n    return res.send(einkaufsliste);\n});\n\nexport default router;"],"file":"einkaufsliste.js"}