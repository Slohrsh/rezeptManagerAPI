{"version":3,"sources":["../../src/models/rezept.js"],"names":["require","Op","regeneratorRuntime","rezept","sequelize","DataTypes","Rezept","define","id","type","INTEGER","autoIncrement","primaryKey","unique","allowNull","validate","notEmpty","bild","STRING","titel","TEXT","kcal","associate","models","hasMany","Wochenplan","as","RezeptZutat","Favorit","findByTitel","rezeptSearch","findAll","where","like","findRezepte","favoritIds","console","log"],"mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;eAEeA,OAAO,CAAC,WAAD,C;IAAdC,E,YAAAA,E;;AACR,IAAMC,kBAAkB,GAAGF,OAAO,CAAC,qBAAD,CAAlC;;AAEA,IAAMG,MAAM,GAAG,SAATA,MAAS,CAACC,SAAD,EAAYC,SAAZ,EAA0B;AACvC,MAAMC,MAAM,GAAGF,SAAS,CAACG,MAAV,CAAiB,cAAjB,EAAiC;AAC9CC,IAAAA,EAAE,EAAE;AACFC,MAAAA,IAAI,EAAEJ,SAAS,CAACK,OADd;AAEFC,MAAAA,aAAa,EAAE,IAFb;AAGFC,MAAAA,UAAU,EAAE,IAHV;AAIFC,MAAAA,MAAM,EAAE,IAJN;AAKFC,MAAAA,SAAS,EAAE,KALT;AAMFC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,QAAQ,EAAE;AADF;AANR,KAD0C;AAW9CC,IAAAA,IAAI,EAAE;AACJR,MAAAA,IAAI,EAAEJ,SAAS,CAACa;AADZ,KAXwC;AAc9CC,IAAAA,KAAK,EAAE;AACLV,MAAAA,IAAI,EAAEJ,SAAS,CAACa;AADX,KAduC;AAiB9Cf,IAAAA,MAAM,EAAE;AACNM,MAAAA,IAAI,EAAEJ,SAAS,CAACe;AADV,KAjBsC;AAoB9CC,IAAAA,IAAI,EAAE;AACJZ,MAAAA,IAAI,EAAEJ,SAAS,CAACK;AADZ;AApBwC,GAAjC,CAAf;;AAyBAJ,EAAAA,MAAM,CAACgB,SAAP,GAAmB,UAAAC,MAAM,EAAI;AAC3BjB,IAAAA,MAAM,CAACkB,OAAP,CAAeD,MAAM,CAACE,UAAtB,EAAkC;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAlC;AACApB,IAAAA,MAAM,CAACkB,OAAP,CAAeD,MAAM,CAACI,WAAtB,EAAmC;AAAED,MAAAA,EAAE,EAAE;AAAN,KAAnC;AACApB,IAAAA,MAAM,CAACkB,OAAP,CAAeD,MAAM,CAACK,OAAtB,EAA+B;AAAEF,MAAAA,EAAE,EAAE;AAAN,KAA/B;AACD,GAJD;;AAMApB,EAAAA,MAAM,CAACuB,WAAP;AAAA,uEAAqB,iBAAMC,YAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACAxB,MAAM,CAACyB,OAAP,CAAe;AAChCC,gBAAAA,KAAK,EAAE;AACLb,kBAAAA,KAAK,sBACFlB,EAAE,CAACgC,IADD,EACQ,MAAMH,YAAN,GAAqB,GAD7B;AADA;AADyB,eAAf,CADA;;AAAA;AACf3B,cAAAA,MADe;AAAA,+CASZA,MATY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAArB;;AAAA;AAAA;AAAA;AAAA;;AAYAG,EAAAA,MAAM,CAAC4B,WAAP;AAAA,wEAAqB,kBAAMC,UAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACnBC,cAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AADmB;AAAA,qBAEA7B,MAAM,CAACyB,OAAP,CAAe;AAChCC,gBAAAA,KAAK,EAAE;AACLxB,kBAAAA,EAAE,sBACCP,EAAE,MADH,EACSkC,UADT;AADG;AADyB,eAAf,CAFA;;AAAA;AAEfhC,cAAAA,MAFe;AAAA,gDAUZA,MAVY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAArB;;AAAA;AAAA;AAAA;AAAA;;AAaA,SAAOG,MAAP;AACD,CA1DD;;eA4DeH,M","sourcesContent":["/**\n * Entity: REZ01_REZEPT\n */\n\nconst { Op } = require(\"sequelize\");\nconst regeneratorRuntime = require(\"regenerator-runtime\");\n\nconst rezept = (sequelize, DataTypes) => {\n  const Rezept = sequelize.define('REZ01_REZEPT', {\n    id: {\n      type: DataTypes.INTEGER,\n      autoIncrement: true,\n      primaryKey: true,\n      unique: true,\n      allowNull: false,\n      validate: {\n        notEmpty: true,\n      },\n    },\n    bild: {\n      type: DataTypes.STRING,\n    },\n    titel: {\n      type: DataTypes.STRING\n    },\n    rezept: {\n      type: DataTypes.TEXT\n    },\n    kcal: {\n      type: DataTypes.INTEGER\n    },\n  });\n\n  Rezept.associate = models => {\n    Rezept.hasMany(models.Wochenplan, { as: 'wochenplaene' });\n    Rezept.hasMany(models.RezeptZutat, { as: 'mengen' });\n    Rezept.hasMany(models.Favorit, { as: 'favoriten' });\n  };\n\n  Rezept.findByTitel = async rezeptSearch => {\n    let rezept = await Rezept.findAll({\n      where: {\n        titel: {\n          [Op.like]: '%' + rezeptSearch + '%'\n        }\n      }\n    });\n\n    return rezept;\n  };\n\n  Rezept.findRezepte = async favoritIds => {\n    console.log(favoritIds);\n    let rezept = await Rezept.findAll({\n      where: {\n        id: {\n          [Op.in]: favoritIds\n        }\n      }\n    });\n\n    return rezept;\n  };\n\n  return Rezept;\n};\n\nexport default rezept;"],"file":"rezept.js"}