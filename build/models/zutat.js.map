{"version":3,"sources":["../../src/models/zutat.js"],"names":["require","Op","regeneratorRuntime","zutat","sequelize","DataTypes","Zutat","define","id","type","INTEGER","autoIncrement","primaryKey","unique","allowNull","validate","notEmpty","beschreibung","STRING","associate","models","hasMany","RezeptZutat","as","findByBeschreibung","zutatSearch","findAll","where","like","findAllByBeschreibung","zutaten","findZutaten","zutatenIds","rezept"],"mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;eACeA,OAAO,CAAC,WAAD,C;IAAdC,E,YAAAA,E;;AACR,IAAMC,kBAAkB,GAAGF,OAAO,CAAC,qBAAD,CAAlC;;AAEC,IAAMG,KAAK,GAAG,SAARA,KAAQ,CAACC,SAAD,EAAYC,SAAZ,EAA0B;AACrC,MAAMC,KAAK,GAAGF,SAAS,CAACG,MAAV,CAAiB,aAAjB,EAAgC;AAC5CC,IAAAA,EAAE,EAAE;AACFC,MAAAA,IAAI,EAAEJ,SAAS,CAACK,OADd;AAEFC,MAAAA,aAAa,EAAE,IAFb;AAGFC,MAAAA,UAAU,EAAE,IAHV;AAIFC,MAAAA,MAAM,EAAE,IAJN;AAKFC,MAAAA,SAAS,EAAE,KALT;AAMFC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,QAAQ,EAAE;AADF;AANR,KADwC;AAW5CC,IAAAA,YAAY,EAAE;AACVR,MAAAA,IAAI,EAAEJ,SAAS,CAACa;AADN;AAX8B,GAAhC,CAAd;;AAgBAZ,EAAAA,KAAK,CAACa,SAAN,GAAkB,UAAAC,MAAM,EAAI;AACxBd,IAAAA,KAAK,CAACe,OAAN,CAAcD,MAAM,CAACE,WAArB,EAAkC;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAlC;AACH,GAFD;;AAIAjB,EAAAA,KAAK,CAACkB,kBAAN;AAAA,uEAA2B,iBAAMC,WAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACLnB,KAAK,CAACoB,OAAN,CAAc;AAC9BC,gBAAAA,KAAK,EAAE;AAAEV,kBAAAA,YAAY,sBAClBhB,EAAE,CAAC2B,IADe,EACR,MAAMH,WAAN,GAAoB,GADZ;AAAd;AADuB,eAAd,CADK;;AAAA;AACnBtB,cAAAA,KADmB;AAAA,+CAQhBA,KARgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA3B;;AAAA;AAAA;AAAA;AAAA;;AAWAG,EAAAA,KAAK,CAACuB,qBAAN;AAAA,wEAA8B,kBAAMC,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACVxB,KAAK,CAACoB,OAAN,CAAc;AAC9BC,gBAAAA,KAAK,EAAE;AAAEV,kBAAAA,YAAY,sBAClBhB,EAAE,MADgB,EACV6B,OADU;AAAd;AADuB,eAAd,CADU;;AAAA;AACxB3B,cAAAA,KADwB;AAAA,gDAQrBA,KARqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA9B;;AAAA;AAAA;AAAA;AAAA;;AAWAG,EAAAA,KAAK,CAACyB,WAAN;AAAA,wEAAoB,kBAAMC,UAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACC1B,KAAK,CAACoB,OAAN,CAAc;AAC/BC,gBAAAA,KAAK,EAAE;AACLnB,kBAAAA,EAAE,sBACCP,EAAE,MADH,EACS+B,UADT;AADG;AADwB,eAAd,CADD;;AAAA;AACdC,cAAAA,MADc;AAAA,gDASXA,MATW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAApB;;AAAA;AAAA;AAAA;AAAA;;AAYA,SAAO3B,KAAP;AACH,CAxDA;;eA0DcH,K","sourcesContent":["/**\n * Entity: REZ02_ZUTAT\n */\nconst { Op } = require(\"sequelize\");\nconst regeneratorRuntime = require(\"regenerator-runtime\");\n\n const zutat = (sequelize, DataTypes) => {\n    const Zutat = sequelize.define('REZ02_ZUTAT', {\n      id: {\n        type: DataTypes.INTEGER,\n        autoIncrement: true,\n        primaryKey: true,\n        unique: true,\n        allowNull: false,\n        validate: {\n          notEmpty: true,\n        },\n      },\n      beschreibung: {\n          type: DataTypes.STRING\n      }\n    });\n\n    Zutat.associate = models => {\n        Zutat.hasMany(models.RezeptZutat, { as: 'mengen' } );\n    };\n\n    Zutat.findByBeschreibung = async zutatSearch => {\n        let zutat = await Zutat.findAll({\n          where: { beschreibung:  {\n            [Op.like]: '%' + zutatSearch + '%' \n          }\n        }\n        });\n     \n        return zutat;\n    };\n\n    Zutat.findAllByBeschreibung = async zutaten => {\n      let zutat = await Zutat.findAll({\n        where: { beschreibung:  {\n          [Op.in]: zutaten\n        }\n      }\n      });\n   \n      return zutat;\n  };\n\n    Zutat.findZutaten = async zutatenIds => {\n      let rezept = await Zutat.findAll({\n        where: {\n          id: {\n            [Op.in]: zutatenIds\n          }\n        }\n      });\n  \n      return rezept;\n    };\n\n    return Zutat;\n}\n\nexport default zutat;"],"file":"zutat.js"}